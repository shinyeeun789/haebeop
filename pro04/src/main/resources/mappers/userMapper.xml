<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.ed.haebeop.persistence.UserMapper">
    <!-- 회원 목록 -->
    <select id="userList" resultType="kr.ed.haebeop.domain.User">
        select * from user
        <where>
            <if test="type != null">
                <trim prefixOverrides="OR">
                    <choose>
                        <when test="type == 'I'.toString()">
                            id LIKE concat('%', #{keyword}, '%')
                        </when>
                        <when test="type == 'N'.toString()">
                            name LIKE concat('%', #{keyword}, '%')
                        </when>
                    </choose>
                </trim>
            </if>
            AND id != 'admin'
        </where>
        order by regdate desc limit #{postStart}, #{postCount}
    </select>

    <!-- 회원정보 조회 -->
    <select id="getUser" resultType="kr.ed.haebeop.domain.User">
        select * from user
        where id = #{id}
    </select>

    <!-- 회원가입 -->
    <insert id="userInsert">
        insert into user
        values(#{id},#{pw},#{name},#{email},#{tel},#{addr1},#{addr2},#{postcode},default,#{birth},#{userType},default,default,default)
    </insert>

    <!-- 로그인 -->
    <select id="loginCheck" resultType="kr.ed.haebeop.domain.User">
        select id, pw, name from user where id = #{id }
    </select>

    <!-- 방문수 업데이트 -->
    <update id="updateVisited">
        update user set visited=visited+1
        where id=#{id}
    </update>

    <!-- 포인트 획득! -->
    <update id="updatePt" parameterType="hashMap">
        update user set pt=pt+#{pt}
        where id=#{id}
    </update>

    <!-- 회원 정보 수정 -->
    <update id="userEdit">
        update user set pw=#{pw }, name=#{name }, email=#{email }, tel=#{tel }, birth=#{birth }, addr1=#{addr1 }, addr2=#{addr2 }, postcode=#{postcode } where id = #{id }
    </update>

    <!-- 회원 탈퇴 -->
    <delete id="userDelete">
        delete from user where id=#{id}
    </delete>

    <!-- 회원 수 조회 -->
    <select id="userCnt" resultType="integer">
        select count(*) from user
        <where>
            <if test="type != null">
                <trim prefixOverrides="OR">
                    <choose>
                        <when test="type == 'I'.toString()">
                            id LIKE concat('%', #{keyword}, '%')
                        </when>
                        <when test="type == 'N'.toString()">
                            name LIKE concat('%', #{keyword}, '%')
                        </when>
                    </choose>
                </trim>
            </if>
            AND id != 'admin'
        </where>
    </select>

    <!-- 수강신청 시 포인트 차감 -->
    <update id="minusPoint" parameterType="hashMap">
        UPDATE user SET pt=pt-(SELECT lprice FROM lecture WHERE lcode=#{lcode}) WHERE id=#{id};
    </update>

    <!-- 현재 스트리밍 중인지 여부 업데이트 -->
    <update id="updateIsStudy">
        UPDATE user SET isStudy = #{isStudy} WHERE id=#{id}
    </update>

    <!-- 현재 스트리밍 중인지 여부 데이터 가져오기 -->
    <select id="getIsStudy" resultType="boolean">
        SELECT isStudy FROM user WHERE id = #{id}
    </select>

    <!-- 선생님으로 가입한 아이디 리스트 불러오기 -->
    <select id="teacherInfoList" resultType="kr.ed.haebeop.domain.User">
        SELECT * FROM user WHERE userType = 'teacher' AND id NOT IN (SELECT tid FROM teacher)
    </select>

    <!-- 아이디 또는 이름으로 검색한 선생님 리스트 불러오기 -->
    <select id="findID" resultType="kr.ed.haebeop.domain.User">
        SELECT * FROM user WHERE userType = 'teacher' AND id NOT IN (SELECT tid FROM teacher) AND (id LIKE concat('%', #{keyword}, '%') OR name LIKE concat('%', #{keyword}, '%'))
    </select>

    <!-- 월별 회원가입한 학생 및 선생님 수 조회 -->
    <select id="userCntList" resultType="java.util.Map">
        SELECT a.label, teaCnt, stuCnt
        FROM (SELECT DATE_FORMAT(regdate, '%Y-%m') AS label, COUNT(*) AS teaCnt FROM user WHERE regdate >= DATE_ADD(NOW(), INTERVAL -1 YEAR) AND userType='teacher' GROUP BY label) a
                 JOIN (SELECT DATE_FORMAT(regdate, '%Y-%m') AS label, COUNT(*) AS stuCnt FROM user WHERE regdate >= DATE_ADD(NOW(), INTERVAL -1 YEAR) AND userType='student' GROUP BY label) b
                      ON (a.label = b.label)
    </select>

    <!-- 방문수 랭킹 조회 -->
    <select id="visitRank" resultType="kr.ed.haebeop.domain.User">
        select * from user order by visited desc
    </select>

</mapper>